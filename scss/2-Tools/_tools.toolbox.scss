// ======================================================================================
//  Toolbox
// ======================================================================================



// =============================================
//  Functions
// =============================================


//  Value to rem
@function value-to-rem($value) {
  $no-units: strip-unit($value);
  @return #{$no-units / 16 * 1rem};
}


//  Remove the unit of a length
//  @param {Number} $number - Number to remove unit from
//  @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}


//  Maths helpers.
//  Halve and double numbers, returning rounded integers.
//
//  USAGE:
//
//  .myClass {
//      padding: halve(30px);
//  }
@function quarter($number) {
  @return round($number / 4);
}

@function halve($number) {
  @return round($number / 2);
}

@function double($number) {
  @return round($number * 2);
}

@function triple($number) {
  @return round($number * 3);
}

@function quadruple($number) {
  @return round($number * 4);
}


//  Slightly lighten a color or darken a color
//
//  Both lighten and darken functions manipulate the lightness of a color in the HSL space
//  by adding or subtracting lightness to it. Basically, they are nothing but aliases
//  for the $lightness parameter of the adjust-color function.
//
//  USAGE:
//
//  .myClass {
//      background-color: tint(#BADA55, 42%);
//  }
//
//  .myClass {
//      background-color: shade(#C0FFEE, 42%);
//  }
@function tint($color, $percentage) {
  @return mix($color, white, $percentage);
}

@function shade($color, $percentage) {
  @return mix($color, black, $percentage);
}


//  Checks if a list contains a value(s)
@function contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != 'number' {
      @return false;
    }
  }

  @return true;
}


//  Fetch nested keys
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    @if type-of($map) != 'map' {
      @warn '`#{$map}` is not a map.';
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return $map;
}


//  Font-face functions
//
//  1. Returns URL to a font based on its path
//  2. Used for creating the source string for fonts using @font-face


// 1 //
@function font($path, $base: $font-base-url) {
  @return url($base + $path);
}


// 2 //
@function font-source-declaration($font-family, $file-path, $file-formats) {
  $src: ();

  $formats-map: (
    eot:    '#{$file-path}.eot?#iefix' format('embedded-opentype'),
    woff2:  '#{$file-path}.woff2' format('woff2'),
    woff:   '#{$file-path}.woff' format('woff'),
    ttf:    '#{$file-path}.ttf' format('truetype'),
    svg:    '#{$file-path}.svg##{$font-family}' format('svg')
  );

  @each $key, $values in $formats-map {
    @if contains($file-formats, $key) {
      $file-path: nth($values, 1);
      $font-format: nth($values, 2);
      $src: append($src, font($file-path) $font-format, comma);
    }
  }

  @return $src;
}


//  Elevation & shadows
//  Based on material design principles:
//  https: //material.io/guidelines/material-design/elevation-shadows.html#elevation-shadows-elevation-android
//
//  1. the shadow representing the space completely obscured by an object relative to its light source
//  2. the space partially obscured by an object
//  3. the space which contains the object itself


// 1 //
@function _get-umbra-map($color) {
  @return (
  0: '0px 0px 0px 0px #{rgba($color, 0.2)}',
  1: '0px 2px 1px -1px #{rgba($color, 0.2)}',
  2: '0px 3px 1px -2px #{rgba($color, 0.2)}',
  3: '0px 3px 3px -2px #{rgba($color, 0.2)}',
  4: '0px 2px 4px -1px #{rgba($color, 0.2)}',
  5: '0px 3px 5px -1px #{rgba($color, 0.2)}',
  6: '0px 3px 5px -1px #{rgba($color, 0.2)}',
  7: '0px 4px 5px -2px #{rgba($color, 0.2)}',
  8: '0px 5px 5px -3px #{rgba($color, 0.2)}',
  9: '0px 5px 6px -3px #{rgba($color, 0.2)}',
  10: '0px 6px 6px -3px #{rgba($color, 0.2)}',
  11: '0px 6px 7px -4px #{rgba($color, 0.2)}',
  12: '0px 7px 8px -4px #{rgba($color, 0.2)}',
  13: '0px 7px 8px -4px #{rgba($color, 0.2)}',
  14: '0px 7px 9px -4px #{rgba($color, 0.2)}',
  15: '0px 8px 9px -5px #{rgba($color, 0.2)}',
  16: '0px 8px 10px -5px #{rgba($color, 0.2)}',
  17: '0px 8px 11px -5px #{rgba($color, 0.2)}',
  18: '0px 9px 11px -5px #{rgba($color, 0.2)}',
  19: '0px 9px 12px -6px #{rgba($color, 0.2)}',
  20: '0px 10px 13px -6px #{rgba($color, 0.2)}',
  21: '0px 10px 13px -6px #{rgba($color, 0.2)}',
  22: '0px 10px 14px -6px #{rgba($color, 0.2)}',
  23: '0px 11px 14px -7px #{rgba($color, 0.2)}',
  24: '0px 11px 15px -7px #{rgba($color, 0.2)}'
  );
}


// 2 //
@function _get-penumbra-map($color) {
  @return (
  0: '0px 0px 0px 0px #{rgba($color, 0.14)}',
  1: '0px 1px 1px 0px #{rgba($color, 0.14)}',
  2: '0px 2px 2px 0px #{rgba($color, 0.14)}',
  3: '0px 3px 4px 0px #{rgba($color, 0.14)}',
  4: '0px 4px 5px 0px #{rgba($color, 0.14)}',
  5: '0px 5px 8px 0px #{rgba($color, 0.14)}',
  6: '0px 6px 10px 0px #{rgba($color, 0.14)}',
  7: '0px 7px 10px 1px #{rgba($color, 0.14)}',
  8: '0px 8px 10px 1px #{rgba($color, 0.14)}',
  9: '0px 9px 12px 1px #{rgba($color, 0.14)}',
  10: '0px 10px 14px 1px #{rgba($color, 0.14)}',
  11: '0px 11px 15px 1px #{rgba($color, 0.14)}',
  12: '0px 12px 17px 2px #{rgba($color, 0.14)}',
  13: '0px 13px 19px 2px #{rgba($color, 0.14)}',
  14: '0px 14px 21px 2px #{rgba($color, 0.14)}',
  15: '0px 15px 22px 2px #{rgba($color, 0.14)}',
  16: '0px 16px 24px 2px #{rgba($color, 0.14)}',
  17: '0px 17px 26px 2px #{rgba($color, 0.14)}',
  18: '0px 18px 28px 2px #{rgba($color, 0.14)}',
  19: '0px 19px 29px 2px #{rgba($color, 0.14)}',
  20: '0px 20px 31px 3px #{rgba($color, 0.14)}',
  21: '0px 21px 33px 3px #{rgba($color, 0.14)}',
  22: '0px 22px 35px 3px #{rgba($color, 0.14)}',
  23: '0px 23px 36px 3px #{rgba($color, 0.14)}',
  24: '0px 24px 38px 3px #{rgba($color, 0.14)}'
  );
}


// 3 //
@function _get-ambient-map($color) {
  @return (
  0: '0px 0px 0px 0px #{rgba($color, 0.12)}',
  1: '0px 1px 3px 0px #{rgba($color, 0.12)}',
  2: '0px 1px 5px 0px #{rgba($color, 0.12)}',
  3: '0px 1px 8px 0px #{rgba($color, 0.12)}',
  4: '0px 1px 10px 0px #{rgba($color, 0.12)}',
  5: '0px 1px 14px 0px #{rgba($color, 0.12)}',
  6: '0px 1px 18px 0px #{rgba($color, 0.12)}',
  7: '0px 2px 16px 1px #{rgba($color, 0.12)}',
  8: '0px 3px 14px 2px #{rgba($color, 0.12)}',
  9: '0px 3px 16px 2px #{rgba($color, 0.12)}',
  10: '0px 4px 18px 3px #{rgba($color, 0.12)}',
  11: '0px 4px 20px 3px #{rgba($color, 0.12)}',
  12: '0px 5px 22px 4px #{rgba($color, 0.12)}',
  13: '0px 5px 24px 4px #{rgba($color, 0.12)}',
  14: '0px 5px 26px 4px #{rgba($color, 0.12)}',
  15: '0px 6px 28px 5px #{rgba($color, 0.12)}',
  16: '0px 6px 30px 5px #{rgba($color, 0.12)}',
  17: '0px 6px 32px 5px #{rgba($color, 0.12)}',
  18: '0px 7px 34px 6px #{rgba($color, 0.12)}',
  19: '0px 7px 36px 6px #{rgba($color, 0.12)}',
  20: '0px 8px 38px 7px #{rgba($color, 0.12)}',
  21: '0px 8px 40px 7px #{rgba($color, 0.12)}',
  22: '0px 8px 42px 7px #{rgba($color, 0.12)}',
  23: '0px 9px 44px 8px #{rgba($color, 0.12)}',
  24: '0px 9px 46px 8px #{rgba($color, 0.12)}'
  );
}


//  Ascending
//  Used to evaluate Sass maps like our grid breakpoints.
//  sass-lint:disable no-empty-rulesets, quotes
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

@include _assert-ascending($container-max-widths, "$container-max-widths");



// =============================================
// Mixins
// =============================================



// Create grid for specific class







//  Mixin for setting font-size in PX and REM
//
//  USAGE:
//
//  .myClass {
//      @include font-size('x-large');
//  }
@mixin font-size($size) {
  $font-size-properties: map-get($font-sizes, $size);

  @if $font-size-properties {
    @include font-size(map-get($font-size-properties, font-size));
  } @else {
    // sass-lint:disable-block no-duplicate-properties
    font-size: #{$size}px;
    font-size: value-to-rem($size);
  }
}


//  Font styling shorthand
//
//  USAGE
//
//  .myClass {
//      @include font(helvetica, bold);
//  }
@mixin font($group, $variant: regular, $properties: family weight style, $font-stack: $font-stack) {
  $font-properties: map-deep-get($font-stack, $group, $variant);

  @if $font-properties {
    @include track-fonts($group, $variant);
    @each $key, $value in $font-properties {
      @if contains($properties, $key) {
        font-#{$key}: $value;
      }
    }
  }
}


//  Track all fonts and variations used in the stylesheet
//  Check if this combination already exists in the map.
//  If not, we add it to the map.
@mixin track-fonts($group, $variant) {


  //  The key for the nested map is the font name?
  @if map-has-key($font-used, $group) == false {
    $font-used: map-merge($font-used, ($group: ())) !global;
  }


  //  Now check if the variation is known
  $font-map: map-get($font-used, $group);


  //  Variation isn't in the map yet? then add it:
  @if index($font-map, $variant) == null {
    $variations: append($font-map, $variant);
    $font-used: map-merge($font-used, ($group: $variations)) !global;
  }
}


//  Add the font-face rules for all used fonts
@mixin font-import($font-stack: $font-stack) {
  @each $group, $variations in $font-used {
    @each $variant in $variations {
      $font-properties: map-deep-get($font-stack, $group, $variant);

      @if $font-properties {


        //  If we have a font-face key we create the font-face rule
        $font-face: map-get($font-properties, font-face);
        @if $font-face {
          $font-family: map-get($font-face, family);
          $file-path: map-get($font-face, path);
          $file-formats: map-get($font-face, formats);
          $font-weight: map-get($font-properties, weight);
          $font-style: map-get($font-properties, style);

          @if $file-formats {
            @include font-face($font-family, $file-path, $font-weight, $font-style, $file-formats);
          } @else {
            @include font-face($font-family, $file-path, $font-weight, $font-style);
          }
        }
      }
    }
  }
}


//  Add a font-face rule
@mixin font-face($font-family, $file-path, $font-weight: normal, $font-style: normal, $file-formats: eot woff2 woff ttf svg) {
  @font-face {
    font-family: $font-family;
    font-style: $font-style;
    font-weight: $font-weight;
    src: font-source-declaration($font-family, $file-path, $file-formats);
  }
}


//  Quickly get the aspect ratio of an image
//
//  USAGE:
//  @include aspect-ratio(600, 400, '.selector');
@mixin aspect-ratio($width, $height, $content-selector: '.content') {
  position: relative;

  &::before {
    display: block;
    width: 100%;
    padding-top: ($height / $width) * 100%;
    content: '';
  }

  > #{$content-selector} {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
}


//  Quickly get a value from our zindex map
//
//  USAGE:
//
//  .myClass {
//      z-index: zindex(z-value);
//  }
@mixin zindex($label) {
  z-index: map-get($zindex, $label);
}



//  Clearfix
//  As per: nicolasgallagher.com/micro-clearfix-hack
@mixin clearfix() {
  &::after {
    display: block;
    clear: both;
    content: '';
  }
}


//  Quickly reset lists
@mixin resetlist {
  margin-left: 0;
  list-style: none;
}


//  Adding a border
//
//  When no arguments are passed it gets the default border on all sides
//  Specifying side(s) is possible by including a 'space-seperated' list
//  Overwriting default border style with '$style' argument
//
//  USAGE:
//
//  @include border();
//  @include border(bottom left);
//  @include border($style: 3px dotted #383838);
//  @include border(top right, $style: 2px solid #ff0000);
@mixin border ($sides: null, $style: $border-width $border-style $border-color) {
  @if ($sides == null) {
    border: $style;
  } @else {
    @each $side in $sides {

      @if ($side == 'top' or $side == 'right' or $side == 'bottom' or $side == 'left') {
        border-#{$side}: $style;
      }
    }
  }
}


//  Mixin for making arrows
//
//  USAGE:
//  @include arrow(top, 10px, #fff);
@mixin arrow ($arrow-direction: 'right', $arrow-size: 6px, $color: palette(primary)) {
  @if ($arrow-direction == 'top') {
    border-right: $arrow-size solid transparent;
    border-bottom: $arrow-size solid $color;
    border-left: $arrow-size solid transparent;
  }
  @if ($arrow-direction == 'right') {
    border-top: $arrow-size solid transparent;
    border-bottom: $arrow-size solid transparent;
    border-left: $arrow-size solid $color;
  }
  @if ($arrow-direction == 'bottom') {
    border-top: $arrow-size solid $color;
    border-right: $arrow-size solid transparent;
    border-left: $arrow-size solid transparent;
  }
  @if ($arrow-direction == 'left') {
    border-top: $arrow-size solid transparent;
    border-right: $arrow-size solid $color;
    border-bottom: $arrow-size solid transparent;
  }
}


//  Make a circle
@mixin circle {
  border-radius: 50%;
}


//  Give some rounded corners
@mixin rounded($radius: 'default') {
  @if ($radius == 'small') {
    border-radius: $border-radius--small;
  } @else {
    border-radius: $border-radius;
  }
}


//  Truncate overly long strings
//  sample value truncate(100%)
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}


//  Show hyphens for every browser supporting it
//  and will break lines in every other browser
@mixin hyphenate {
  overflow-wrap: break-word;
  word-wrap: break-word;
  hyphens: auto;
}


//  Quickly add a ellipsis
@mixin ellipsis() {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}


//  Can be used to make
//  text unselectable
@mixin no-select() {
  // sass-lint:disable-block no-vendor-prefixes
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  user-select: none;
}


//  Handling Long Words and URLs (Forcing Breaks, Hyphenation, Ellipsis, etc)
//  https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
@mixin word-wrap() {
  overflow-wrap: break-word;
  word-wrap: break-word;
  word-break: break-word;
  hyphens: auto;
}


//  Restrict an element to a max-width for creating gutters on the side
@mixin constrain() {
  // sass-lint:disable-block no-important
  width: 100%;
  max-width: calc(#{map-get($breakpoints, xl)} + #{double($site-gutter-width)}) !important;
  margin-right: auto !important;
  margin-left: auto !important;
  padding-right: $site-gutter-width !important;
  padding-left: $site-gutter-width !important;
}


//  Constrain reset when inside
//  an constrained element.
@mixin reset-constrain() {
  // sass-lint:disable-block no-important
  margin-right: calc(-50vw + 50%) !important;
  margin-left: calc(-50vw + 50%) !important;
}

@mixin reset-constrain-pad() {
  @include reset-constrain;
  // sass-lint:disable-block no-important
  padding-right: calc(50vw - 50%) !important;
  padding-left: calc(50vw - 50%) !important;
}


//  Constrain reset when inside
//  an constrained element inside a small media-query.
@mixin reset-constrain-at-small() {
  @include mq(max m) {
    @include reset-constrain;
  }
}

@mixin reset-constrain-pad-at-small() {
  @include mq(max m) {
    @include reset-constrain-pad;
  }
}


//  Elevation & shadows
//
//  Based on material design principles:
//  https: //material.io/guidelines/material-design/elevation-shadows.html#elevation-shadows-elevation-android
//
//  USAGE:
//
//  .myClass {
//    @include $elevation(2);
//
//    &:active {
//      @include $elevation(8);
//    }
//  }
@mixin elevation($z-value, $color: $page-shadow-color) {
  @if type-of($z-value) != number or not unitless($z-value) {
    @error '$zValue must be a unitless number';
  }
  @if $z-value < 0 or $z-value > 24 {
    @error '$zValue must be between 0 and 24';
  }

  box-shadow: #{map-get(_get-umbra-map($color), $z-value)},
  #{map-get(_get-penumbra-map($color), $z-value)},
  #{map-get(_get-ambient-map($color), $z-value)};
}
